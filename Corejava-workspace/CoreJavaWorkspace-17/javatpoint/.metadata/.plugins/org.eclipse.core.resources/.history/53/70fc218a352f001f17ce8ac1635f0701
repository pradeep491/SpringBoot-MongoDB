package com.test;

import java.util.Arrays;
import java.util.Comparator;
import java.util.Scanner;

class subset {
	int parent, rank;
}

class Edge {
	int a;
	int b;
	int cost;

	Edge(int a, int b, int c) {
		this.a = a;
		this.b = b;
		this.cost = c;
	}
}

class SortAsc implements Comparator<Edge> {
	public int compare(Edge a, Edge b) {
		return a.cost - b.cost;
	}
}

class SortDsc implements Comparator<Edge> {
	public int compare(Edge a, Edge b) {
		return b.cost - a.cost;
	}
}

class Main {

	// if the vertex is connected the have same number
	// with those it is connected
	static int find(subset subsets[], int i) {
		if (subsets[i].parent != i)
			subsets[i].parent = find(subsets, subsets[i].parent);

		return subsets[i].parent;
	}

	// A function that does union of two sets
	// of x and y (uses union by rank)
	static void Union(subset subsets[], int x, int y) {
		int xroot = find(subsets, x);
		int yroot = find(subsets, y);

		if (subsets[xroot].rank < subsets[yroot].rank)
			subsets[xroot].parent = yroot;
		else if (subsets[xroot].rank > subsets[yroot].rank)
			subsets[yroot].parent = xroot;

		else {
			subsets[yroot].parent = xroot;
			subsets[xroot].rank++;
		}
	}

	static int KruskalMST(int V, Edge E[]) {
		int e = 0;
		subset subsets[] = new subset[V];
		for (int i = 0; i < V; ++i)
			subsets[i] = new subset();

		// Create V subsets with single elements
		for (int v = 0; v < V; ++v) {
			subsets[v].parent = v;
			subsets[v].rank = 0;
		}

		int i = 0; // Index used to pick next edge

		int totalCost = 0;
		// maximum number of edge could be V-1
		while (e < V - 1) {
			int x = find(subsets, E[i].a);
			int y = find(subsets, E[i].b);

			// if the selected edge is not connected the add to ans
			if (x != y) {
				totalCost += E[i].cost;
				Union(subsets, x, y);
				e++;
			}
			i++;
		}

		return totalCost;
	}

	public static void main(String[] args) {
		int V, e;
		Scanner sc = new Scanner(System.in);
		System.out.println("please enter values");
		V = sc.nextInt();
		e = sc.nextInt();

		Edge E[] = new Edge[e];
		int A[] = new int[e];
		int B[] = new int[e];
		int C[] = new int[e];
		for (int i = 0; i < e; i++) {
			A[i] = sc.nextInt();
			--A[i];
		}
		for (int i = 0; i < e; i++) {
			B[i] = sc.nextInt();
			--B[i];
		}
		for (int i = 0; i < e; i++) {
			C[i] = sc.nextInt();
		}
		for (int i = 0; i < e; i++) {
			E[i] = new Edge(A[i], B[i], C[i]);
		}
		Arrays.sort(E, new SortAsc());
		int min = KruskalMST(V, E);

		Arrays.sort(E, new SortDsc());
		int max = KruskalMST(V, E);

		System.out.println("{" + min + ", " + max + "}");
	}
}
